name: Build and Push Keycloak with Theme

on:
  push:
    branches:
      - main
      - develop
      - staging
    paths:
      - 'keycloak/**'
      - '.github/workflows/build-and-push-keycloak.yml'
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  IMAGE_NAME: ehr-keycloak

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            # For main branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=prod,enable={{is_default_branch}}

            # For develop branch
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/develop' }}

            # For staging branch
            type=raw,value=staging,enable=${{ github.ref == 'refs/heads/staging' }}

            # SHA for all builds
            type=sha,prefix={{branch}}-

      - name: Build and push Keycloak image
        uses: docker/build-push-action@v5
        with:
          context: ./keycloak
          file: ./keycloak/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Update deployment status
        if: success()
        run: |
          echo "âœ… Successfully built and pushed ${{ env.IMAGE_NAME }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
