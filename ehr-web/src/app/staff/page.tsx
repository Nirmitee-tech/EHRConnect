'use client';

import React, { useState, useEffect } from 'react';
import { User, Filter, MoreVertical, Plus, Search, Phone, Mail, Calendar, Clock, AlertCircle, Loader2, Stethoscope, Award } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import Link from 'next/link';
import { useFacility } from '@/contexts/facility-context';
import { StaffMember, DEFAULT_OFFICE_HOURS } from '@/types/staff';
import { StaffDetailDrawer } from '@/components/staff/staff-detail-drawer';
import { StaffService } from '@/services/staff.service';

export default function StaffPage() {
  const { currentFacility } = useFacility();
  const [activeTab, setActiveTab] = useState<'doctor' | 'general'>('doctor');
  const [staffData, setStaffData] = useState<StaffMember[]>([]);
  const [loading, setLoading] = useState(true);
  const [searching, setSearching] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [totalCount, setTotalCount] = useState(0);
  const [selectedStaff, setSelectedStaff] = useState<StaffMember | null>(null);
  const [isDrawerOpen, setIsDrawerOpen] = useState(false);

  // Load staff from FHIR API using StaffService
  const loadStaff = async (search: string = '') => {
    setLoading(true);
    setError(null);

    try {
      const staffMembers = await StaffService.getPractitioners({
        name: search || undefined,
        active: activeTab === 'doctor' ? true : undefined,
        count: 50
      });

      setStaffData(staffMembers);
      setTotalCount(staffMembers.length);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load staff');
      setStaffData([]);
    } finally {
      setLoading(false);
      setSearching(false);
    }
  };

  // Search handler with debounce
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      if (searchQuery !== '') {
        setSearching(true);
      }
      loadStaff(searchQuery);
    }, 500);

    return () => clearTimeout(timeoutId);
  }, [searchQuery, activeTab]);

  // Initial load
  useEffect(() => {
    loadStaff();
  }, [activeTab]);

  const handleStaffClick = (staff: StaffMember) => {
    setSelectedStaff(staff);
    setIsDrawerOpen(true);
  };

  const handleAddStaff = () => {
    // Create new empty staff member
    const newStaff: StaffMember = {
      id: '', // Will be generated by backend
      name: '',
      specialty: '',
      phone: '',
      email: '',
      qualification: '',
      active: true,
      employmentType: 'full-time',
      color: '#3B82F6',
      officeHours: DEFAULT_OFFICE_HOURS,
      vacationSchedules: []
    };
    setSelectedStaff(newStaff);
    setIsDrawerOpen(true);
  };

  const handleSaveStaff = async (updatedStaff: StaffMember) => {
    try {
      if (updatedStaff.id) {
        // Update existing staff
        await StaffService.updatePractitioner(updatedStaff.id, updatedStaff);

        // Update local state
        setStaffData(prevData =>
          prevData.map(staff => staff.id === updatedStaff.id ? updatedStaff : staff)
        );
      } else {
        // Create new staff
        const createdStaff = await StaffService.createPractitioner(updatedStaff);

        // Add to local state
        setStaffData(prevData => [...prevData, createdStaff]);
        setTotalCount(prev => prev + 1);
      }

      // Refresh the list
      await loadStaff(searchQuery);
    } catch (error) {
      console.error('Error saving staff:', error);
      alert('Failed to save staff changes. Please try again.');
    }
  };

  const getWorkingDays = (staff: StaffMember) => {
    const days = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
    return days.map((day, index) => ({
      day,
      isWorking: staff.officeHours?.[index]?.isWorking || false
    }));
  };

  const WorkingDayCircle = ({ day, isActive }: { day: string; isActive: boolean }) => (
    <div
      className={`
        w-7 h-7 rounded-full flex items-center justify-center text-xs font-semibold transition-all duration-200
        ${isActive
          ? 'bg-[#5BA6FF] text-white'
          : 'bg-[#E5E7EB] text-[#9CA3AF]'
        }
      `}
    >
      {day}
    </div>
  );

  const getOfficeHoursDisplay = (staff: StaffMember) => {
    const workingDays = staff.officeHours?.filter(h => h.isWorking) || [];
    if (workingDays.length === 0) return 'No hours set';
    const firstDay = workingDays[0];
    return `${firstDay.startTime} - ${firstDay.endTime}`;
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Staff Management</h1>
          <p className="text-gray-600 mt-1">
            {currentFacility?.name ? `Managing staff for ${currentFacility.name}` : 'Manage healthcare staff and practitioners'}
          </p>
        </div>
        <Button
          onClick={handleAddStaff}
          className="bg-primary hover:bg-primary/90 text-white shadow-sm transition-all duration-200"
        >
          <Plus className="h-4 w-4 mr-2" />
          Add Staff Member
        </Button>
      </div>

      {/* Search and Filters */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div className="flex flex-col lg:flex-row gap-4 items-center justify-between">
          <div className="flex-1 max-w-md">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search staff by name or specialty..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 pr-4 py-2 border-gray-200 focus:border-blue-500 focus:ring-blue-500 rounded-lg"
              />
              {searching && (
                <Loader2 className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 animate-spin" />
              )}
            </div>
          </div>

          <div className="flex items-center space-x-3">
            {/* Tab Navigation */}
            <div className="flex bg-gray-100 rounded-lg p-1">
              <button
                onClick={() => setActiveTab('doctor')}
                className={`px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 ${
                  activeTab === 'doctor'
                    ? 'bg-white text-blue-600 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                Doctor Staff
              </button>
              <button
                onClick={() => setActiveTab('general')}
                className={`px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 ${
                  activeTab === 'general'
                    ? 'bg-white text-blue-600 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                General Staff
              </button>
            </div>

            <Button variant="outline" className="flex items-center space-x-2">
              <Filter className="h-4 w-4" />
              <span>Filters</span>
            </Button>
          </div>
        </div>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <div className="text-2xl font-bold text-gray-900">{totalCount}</div>
              <div className="text-sm text-gray-600">Total Staff</div>
            </div>
            <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
              <User className="h-6 w-6 text-blue-600" />
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <div className="text-2xl font-bold text-gray-900">
                {staffData.filter(s => s.active).length}
              </div>
              <div className="text-sm text-gray-600">Active</div>
            </div>
            <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
              <Stethoscope className="h-6 w-6 text-green-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <div className="text-2xl font-bold text-gray-900">
                {staffData.filter(s => s.specialty.toLowerCase().includes('doctor') || s.specialty.toLowerCase().includes('physician')).length}
              </div>
              <div className="text-sm text-gray-600">Doctors</div>
            </div>
            <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
              <Award className="h-6 w-6 text-purple-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <div className="text-2xl font-bold text-gray-900">
                {staffData.filter(s => !s.specialty.toLowerCase().includes('doctor') && !s.specialty.toLowerCase().includes('physician')).length}
              </div>
              <div className="text-sm text-gray-600">Other Staff</div>
            </div>
            <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
              <User className="h-6 w-6 text-orange-600" />
            </div>
          </div>
        </div>
      </div>

      {/* Error State */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-xl p-6">
          <div className="flex items-center space-x-3">
            <AlertCircle className="h-5 w-5 text-red-500" />
            <div>
              <h3 className="text-sm font-medium text-red-800">Error loading staff</h3>
              <p className="text-sm text-red-600 mt-1">{error}</p>
            </div>
          </div>
          <Button 
            onClick={() => loadStaff(searchQuery)} 
            className="mt-4" 
            variant="outline"
            size="sm"
          >
            Try Again
          </Button>
        </div>
      )}

      {/* Loading State */}
      {loading && (
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-12">
          <div className="flex items-center justify-center space-x-3">
            <Loader2 className="h-6 w-6 text-blue-600 animate-spin" />
            <span className="text-gray-600">Loading staff members...</span>
          </div>
        </div>
      )}

      {/* Staff Table */}
      {!loading && !error && (
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
          {staffData.length === 0 ? (
            <div className="p-12 text-center">
              <Stethoscope className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-900 mb-2">No staff members found</h3>
              <p className="text-gray-600 mb-6">
                {searchQuery ? 'No staff members match your search criteria.' : 'Get started by adding your first staff member.'}
              </p>
              <Button onClick={handleAddStaff}>
                <Plus className="h-4 w-4 mr-2" />
                Add First Staff Member
              </Button>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50 border-b border-gray-200">
                  <tr>
                    <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      Name & Specialty
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      Contact Information
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      Working Days
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      Qualification
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {staffData.map((staff, index) => (
                    <tr
                      key={staff.id}
                      className="hover:bg-gray-50 transition-all duration-200 cursor-pointer"
                      style={{
                        animation: `fadeInUp 0.3s ease-out ${index * 0.05}s both`
                      }}
                      onClick={() => handleStaffClick(staff)}
                    >
                      <td className="px-6 py-6">
                        <div className="flex items-center space-x-4">
                          <div
                            className="w-12 h-12 rounded-full flex items-center justify-center text-white font-semibold"
                            style={{ backgroundColor: staff.color || '#3B82F6' }}
                          >
                            {staff.name.split(' ').map(n => n[0]).join('').substring(0, 2).toUpperCase()}
                          </div>
                          <div>
                            <div className="text-sm font-semibold text-gray-900">{staff.name}</div>
                            <div className="text-sm text-blue-600 font-medium">{staff.specialty}</div>
                            <div className="text-xs text-gray-500 mt-1">ID: {staff.id.substring(0, 8)}...</div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-6">
                        <div className="space-y-2">
                          {staff.phone && (
                            <div className="flex items-center space-x-2 text-sm text-gray-700">
                              <Phone className="h-3 w-3 text-gray-400" />
                              <span>{staff.phone}</span>
                            </div>
                          )}
                          {staff.email && (
                            <div className="flex items-center space-x-2 text-sm text-blue-600 hover:text-blue-800">
                              <Mail className="h-3 w-3 text-gray-400" />
                              <a href={`mailto:${staff.email}`} className="hover:underline">{staff.email}</a>
                            </div>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-6">
                        <div className="flex space-x-1">
                          {getWorkingDays(staff).map(({ day, isWorking }, dayIndex) => (
                            <WorkingDayCircle
                              key={dayIndex}
                              day={day}
                              isActive={isWorking}
                            />
                          ))}
                        </div>
                        <div className="text-xs text-gray-500 mt-2">{getOfficeHoursDisplay(staff)}</div>
                      </td>
                      <td className="px-6 py-6">
                        <div className="flex items-center space-x-2">
                          <Award className="h-4 w-4 text-blue-500" />
                          <span className="text-sm text-gray-900 font-medium">{staff.qualification}</span>
                        </div>
                        <div className="text-xs text-gray-500 mt-1">Licensed Practitioner</div>
                      </td>
                      <td className="px-6 py-6">
                        <div className="flex flex-col space-y-2">
                          <span className={`inline-flex px-3 py-1 text-xs font-semibold rounded-md ${
                            staff.active
                              ? 'bg-[#E8F5E8] text-[#047857]'
                              : 'bg-[#F3F4F6] text-[#4B5563]'
                          }`}>
                            {staff.active ? 'Active' : 'Inactive'}
                          </span>
                          <span className="inline-flex px-3 py-1 text-xs font-medium rounded-md bg-[#FFF4E0] text-[#D97706] uppercase">
                            {staff.employmentType || 'full-time'}
                          </span>
                        </div>
                      </td>
                      <td className="px-6 py-6">
                        <div className="flex items-center space-x-2">
                          <Button
                            variant="ghost"
                            size="sm"
                            className="hover:bg-gray-100"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleStaffClick(staff);
                            }}
                          >
                            <MoreVertical className="h-4 w-4" />
                          </Button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      )}

      {/* Staff Detail Drawer */}
      <StaffDetailDrawer
        isOpen={isDrawerOpen}
        onClose={() => {
          setIsDrawerOpen(false);
          setSelectedStaff(null);
        }}
        staff={selectedStaff}
        onSave={handleSaveStaff}
      />
    </div>
  );
}
